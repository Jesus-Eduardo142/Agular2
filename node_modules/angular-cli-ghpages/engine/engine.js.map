{"version":3,"file":"engine.js","sourceRoot":"","sources":["../../engine/engine.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as fse from 'fs-extra';\n\nimport { logging } from '@angular-devkit/core';\nimport { defaults } from './defaults';\nimport { GHPages } from '../interfaces';\nimport { Schema } from '../deploy/schema';\n\nconst ghpages = require('gh-pages');\n\nexport async function run(dir: string, options: Schema, logger: logging.LoggerApi) {\n\n  options = prepareOptions(options, logger);\n\n  // always clean the cache directory.\n  // avoids \"Error: Remote url mismatch.\"\n  if (options.dryRun) {\n    logger.info('Dry-run / SKIPPED: cleaning of the cache directory');\n  } else {\n    ghpages.clean();\n  }\n\n  try {\n    await checkIfDistFolderExists(dir);\n    await createNotFoundPage(dir, options, logger);\n    await createCnameFile(dir, options, logger);\n    await publishViaGhPages(ghpages, dir, options, logger);\n\n    logger.info('üöÄ Successfully published via angular-cli-ghpages! Have a nice day!');\n  }\n  catch (error) {\n    logger.error('‚ùå An error occurred!');\n    throw error;\n  }\n};\n\n\nexport function prepareOptions(origOptions: Schema, logger: logging.LoggerApi) {\n\n  const options = {\n    ...defaults,\n    ...origOptions\n  };\n\n  if (origOptions.noSilent) {\n    options.silent = !origOptions.noSilent\n  }\n\n  if (origOptions.noDotfiles) {\n    options.dotfiles = !origOptions.noDotfiles\n  }\n\n  if (options.dryRun) {\n    logger.info('Dry-run: No changes are applied at all.');\n  }\n\n  if (options.name && options.email) {\n    options['user'] = {\n      name: options.name,\n      email: options.email\n    };\n  };\n\n  // gh-pages internal: forwards messages to logger\n  options['logger'] = function (message) { logger.info(message); };\n\n  if (process.env.TRAVIS) {\n    options.message += ' -- ' + process.env.TRAVIS_COMMIT_MESSAGE + ' \\n\\n' +\n      'Triggered by commit: https://github.com/' + process.env.TRAVIS_REPO_SLUG + '/commit/' + process.env.TRAVIS_COMMIT + '\\n' +\n      'Travis CI build: https://travis-ci.org/' + process.env.TRAVIS_REPO_SLUG + '/builds/' + process.env.TRAVIS_BUILD_ID;\n  }\n\n  if (process.env.CIRCLECI) {\n    options.message += '\\n\\n' +\n      'Triggered by commit: https://github.com/' + process.env.CIRCLE_PROJECT_USERNAME + '/' + process.env.CIRCLE_PROJECT_REPONAME + '/commit/' + process.env.CIRCLE_SHA1 + '\\n' +\n      'CircleCI build: ' + process.env.CIRCLE_BUILD_URL;\n  }\n\n  if (process.env.GH_TOKEN && options.repo) {\n    options.repo = options.repo.replace('http://github.com/', 'http://GH_TOKEN@github.com/');\n    options.repo = options.repo.replace('https://github.com/', 'https://GH_TOKEN@github.com/');\n    options.repo = options.repo.replace('GH_TOKEN', process.env.GH_TOKEN);\n  }\n\n\n  return options;\n}\n\nasync function checkIfDistFolderExists(dir: string) {\n  if (await !fse.pathExists(dir)) {\n    throw new Error('Dist folder does not exist. Check the dir --dir parameter or build the project first!');\n  }\n}\n\nasync function createNotFoundPage(dir: string, options: Schema, logger: logging.LoggerApi) {\n\n  if (options.dryRun) {\n    logger.info('Dry-run / SKIPPED: copying of index.html to 404.html');\n    return;\n  }\n\n  // Note:\n  // There is no guarantee that there will be an index.html file,\n  // as we may may specify a custom index file.\n  // TODO: respect setting in angular.json\n  const indexHtml = path.join(dir, 'index.html');\n  const notFoundPage = path.join(dir, '404.html');\n\n  // console.log('***', indexHtml)\n  // console.log('***', notFoundPage)\n\n  try {\n    return await fse.copy(indexHtml, notFoundPage);\n  }\n  catch (err) {\n    logger.info('index.html could not be copied to 404.html. This does not look like an angular-cli project?!');\n    logger.info('(Hint: are you sure that you have setup the directory correctly?)');\n    logger.debug('Diagnostic info', err);\n    return;\n  }\n}\n\nasync function createCnameFile(dir: string, options: Schema, logger: logging.LoggerApi) {\n\n  if (!options.cname) {\n    return;\n  }\n\n  const cnameFile = path.join(dir, 'CNAME');\n  if (options.dryRun) {\n    logger.info('Dry-run / SKIPPED: creating of CNAME file with content: ' + options.cname);\n    return;\n  }\n\n  try {\n    await fse.writeFile(cnameFile, options.cname);\n    logger.info('CNAME file created');\n  }\n  catch (err) {\n    logger.error('CNAME file could not be created. Stopping execution.');\n    throw err;\n  }\n}\n\nasync function publishViaGhPages(ghPages: GHPages, dir: string, options: Schema, logger: logging.LoggerApi) {\n  if (options.dryRun) {\n    logger.info(`Dry-run / SKIPPED: publishing folder \"${ dir }\" with the following options: ` + JSON.stringify({\n      dir: dir,\n      repo: options.repo || 'falsy: current working directory (which must be a git repo in this case) will be used to commit & push',\n      message: options.message,\n      branch: options.branch,\n      user: options.user || 'falsy: local or global git username & email properties will be taken',\n      silent: options.silent || 'falsy: logging is in silent mode by default',\n      dotfiles: options.dotfiles || 'falsy: dotfiles are included by default',\n      cname: options.cname || 'falsy: no CNAME file will be created',\n    }, null, '  '));\n    return;\n  }\n\n  return await ghPages.publish(dir, options)\n}\n"]}
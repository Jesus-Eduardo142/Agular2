"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const fse = __importStar(require("fs-extra"));
const defaults_1 = require("./defaults");
const ghpages = require('gh-pages');
function run(dir, options, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        options = prepareOptions(options, logger);
        if (options.dryRun) {
            logger.info('Dry-run / SKIPPED: cleaning of the cache directory');
        }
        else {
            ghpages.clean();
        }
        try {
            yield checkIfDistFolderExists(dir);
            yield createNotFoundPage(dir, options, logger);
            yield createCnameFile(dir, options, logger);
            yield publishViaGhPages(ghpages, dir, options, logger);
            logger.info('üöÄ Successfully published via angular-cli-ghpages! Have a nice day!');
        }
        catch (error) {
            logger.error('‚ùå An error occurred!');
            throw error;
        }
    });
}
exports.run = run;
;
function prepareOptions(origOptions, logger) {
    const options = Object.assign({}, defaults_1.defaults, origOptions);
    if (origOptions.noSilent) {
        options.silent = !origOptions.noSilent;
    }
    if (origOptions.noDotfiles) {
        options.dotfiles = !origOptions.noDotfiles;
    }
    if (options.dryRun) {
        logger.info('Dry-run: No changes are applied at all.');
    }
    if (options.name && options.email) {
        options['user'] = {
            name: options.name,
            email: options.email
        };
    }
    ;
    options['logger'] = function (message) { logger.info(message); };
    if (process.env.TRAVIS) {
        options.message += ' -- ' + process.env.TRAVIS_COMMIT_MESSAGE + ' \n\n' +
            'Triggered by commit: https://github.com/' + process.env.TRAVIS_REPO_SLUG + '/commit/' + process.env.TRAVIS_COMMIT + '\n' +
            'Travis CI build: https://travis-ci.org/' + process.env.TRAVIS_REPO_SLUG + '/builds/' + process.env.TRAVIS_BUILD_ID;
    }
    if (process.env.CIRCLECI) {
        options.message += '\n\n' +
            'Triggered by commit: https://github.com/' + process.env.CIRCLE_PROJECT_USERNAME + '/' + process.env.CIRCLE_PROJECT_REPONAME + '/commit/' + process.env.CIRCLE_SHA1 + '\n' +
            'CircleCI build: ' + process.env.CIRCLE_BUILD_URL;
    }
    if (process.env.GH_TOKEN && options.repo) {
        options.repo = options.repo.replace('http://github.com/', 'http://GH_TOKEN@github.com/');
        options.repo = options.repo.replace('https://github.com/', 'https://GH_TOKEN@github.com/');
        options.repo = options.repo.replace('GH_TOKEN', process.env.GH_TOKEN);
    }
    return options;
}
exports.prepareOptions = prepareOptions;
function checkIfDistFolderExists(dir) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield !fse.pathExists(dir)) {
            throw new Error('Dist folder does not exist. Check the dir --dir parameter or build the project first!');
        }
    });
}
function createNotFoundPage(dir, options, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        if (options.dryRun) {
            logger.info('Dry-run / SKIPPED: copying of index.html to 404.html');
            return;
        }
        const indexHtml = path.join(dir, 'index.html');
        const notFoundPage = path.join(dir, '404.html');
        try {
            return yield fse.copy(indexHtml, notFoundPage);
        }
        catch (err) {
            logger.info('index.html could not be copied to 404.html. This does not look like an angular-cli project?!');
            logger.info('(Hint: are you sure that you have setup the directory correctly?)');
            logger.debug('Diagnostic info', err);
            return;
        }
    });
}
function createCnameFile(dir, options, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!options.cname) {
            return;
        }
        const cnameFile = path.join(dir, 'CNAME');
        if (options.dryRun) {
            logger.info('Dry-run / SKIPPED: creating of CNAME file with content: ' + options.cname);
            return;
        }
        try {
            yield fse.writeFile(cnameFile, options.cname);
            logger.info('CNAME file created');
        }
        catch (err) {
            logger.error('CNAME file could not be created. Stopping execution.');
            throw err;
        }
    });
}
function publishViaGhPages(ghPages, dir, options, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        if (options.dryRun) {
            logger.info(`Dry-run / SKIPPED: publishing folder "${dir}" with the following options: ` + JSON.stringify({
                dir: dir,
                repo: options.repo || 'falsy: current working directory (which must be a git repo in this case) will be used to commit & push',
                message: options.message,
                branch: options.branch,
                user: options.user || 'falsy: local or global git username & email properties will be taken',
                silent: options.silent || 'falsy: logging is in silent mode by default',
                dotfiles: options.dotfiles || 'falsy: dotfiles are included by default',
                cname: options.cname || 'falsy: no CNAME file will be created',
            }, null, '  '));
            return;
        }
        return yield ghPages.publish(dir, options);
    });
}
//# sourceMappingURL=engine.js.map
{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../deploy/builder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,yDAAyF;AACzF,oDAA2D;AAC3D,+CAA8E;AAE9E,4CAAoB;AACpB,2CAA6B;AAE7B,wDAA+B;AAC/B,yDAA2C;AAI3C,kBAAe,yBAAa,CAC1B,CACE,OAAe,EACf,OAAuB,EACC,EAAE;IAE1B,MAAM,IAAI,GAAG,gBAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC9C,MAAM,SAAS,GAAG,IAAI,mBAAY,CAAC,SAAS,CAAC,SAAS,CACpD,IAAI,EACJ,IAAI,qBAAc,EAAE,CACrB,CAAC;IACF,MAAM,SAAS;SACZ,qBAAqB,CAAC,gBAAS,CAAC,cAAc,CAAC,CAAC;SAChD,SAAS,EAAE,CAAC;IAEf,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;KACnE;IAED,MAAM,OAAO,GAAG,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAEpE,IACE,CAAC,OAAO;QACR,CAAC,OAAO,CAAC,KAAK;QACd,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO;QACtB,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,EACjC;QACA,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;KAC7D;IAMD,MAAM,KAAK,GAAG,YAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAC;IACxC,MAAM,aAAa,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAE9E,IAAI;QACF,MAAM,iBAAM,CACV,MAAM,EACN,OAAO,EACP,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAC1D,OAAO,CACR,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,CAAC,CAAC,CAAC;QACxD,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjB,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;KAC3B;IAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC,CAAA,CACF,CAAC","sourcesContent":["import { BuilderContext, BuilderOutput, createBuilder } from '@angular-devkit/architect';\nimport { NodeJsSyncHost } from '@angular-devkit/core/node';\nimport { experimental, normalize, asWindowsPath } from '@angular-devkit/core';\nimport { Schema } from './schema';\nimport os from 'os';\nimport * as path from 'path';\n\nimport deploy from './actions';\nimport * as engine from '../engine/engine';\n\n// Call the createBuilder() function to create a builder. This mirrors\n// createJobHandler() but add typings specific to Architect Builders.\nexport default createBuilder<any>(\n  async (\n    options: Schema,\n    context: BuilderContext\n  ): Promise<BuilderOutput> => {\n    // The project root is added to a BuilderContext.\n    const root = normalize(context.workspaceRoot);\n    const workspace = new experimental.workspace.Workspace(\n      root,\n      new NodeJsSyncHost()\n    );\n    await workspace\n      .loadWorkspaceFromHost(normalize('angular.json'))\n      .toPromise();\n\n    if (!context.target) {\n      throw new Error('Cannot deploy the application without a target');\n    }\n\n    const targets = workspace.getProjectTargets(context.target.project);\n\n    if (\n      !targets ||\n      !targets.build ||\n      !targets.build.options ||\n      !targets.build.options.outputPath\n    ) {\n      throw new Error('Cannot find the project output directory');\n    }\n\n    // console.log('***', workspace.root)\n    // console.log('***', targets.build.options.outputPath)\n    // console.log('***', asWindowsPath( workspace.root))\n\n    const isWin = os.platform() === 'win32';\n    const workspaceRoot = !isWin ? workspace.root : asWindowsPath(workspace.root);\n\n    try {\n      await deploy(\n        engine,\n        context,\n        path.join(workspaceRoot, targets.build.options.outputPath),\n        options\n      );\n    } catch (e) {\n      context.logger.error('Error when trying to deploy:', e);\n      console.error(e);\n      return { success: false };\n    }\n\n    return { success: true };\n  }\n);\n"]}